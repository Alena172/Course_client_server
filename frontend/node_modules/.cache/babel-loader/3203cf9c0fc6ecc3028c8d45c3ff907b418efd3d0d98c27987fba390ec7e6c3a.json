{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\u0420\\u041A\\u0421\\u041F_\\u043A\\u0443\\u0440\\u0441\\u0430\\u0447\\\\frontend\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport API from '../api';\nimport AuthForm from '../components/AuthForm';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const handleLogin = async formData => {\n    try {\n      const response = await API.post('/auth/login', {\n        email: formData.email,\n        password: formData.password\n      });\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n      localStorage.setItem('userId', response.data.user._id); // <--- ЭТА строка\n      localStorage.setItem('token', response.data.token);\n      alert('Вы успешно вошли!');\n      window.location.href = '/news';\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response2, _err$response2$data, _err$response3;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || 'Ошибка при авторизации';\n      alert(errorMessage);\n      console.error('Ошибка входа:', ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0412\\u0445\\u043E\\u0434\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AuthForm, {\n      type: \"login\",\n      onSubmit: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(LoginPage, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useNavigate","API","AuthForm","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPage","_s","navigate","handleLogin","formData","response","post","email","password","localStorage","setItem","JSON","stringify","data","user","_id","token","alert","window","location","href","err","_err$response","_err$response$data","_err$response2","_err$response2$data","_err$response3","errorMessage","message","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onSubmit","_c","$RefreshReg$"],"sources":["C:/РКСП_курсач/frontend/src/pages/LoginPage.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport API from '../api';\r\nimport AuthForm from '../components/AuthForm';\r\n\r\nconst LoginPage = () => {\r\n    const navigate = useNavigate();\r\n  \r\n    const handleLogin = async (formData) => {\r\n        try {\r\n          const response = await API.post('/auth/login', { \r\n            email: formData.email, \r\n            password: formData.password \r\n          });\r\n      \r\n          localStorage.setItem('user', JSON.stringify(response.data.user));\r\n          localStorage.setItem('userId', response.data.user._id); // <--- ЭТА строка\r\n          localStorage.setItem('token', response.data.token);\r\n      \r\n          alert('Вы успешно вошли!');\r\n          window.location.href = '/news';\r\n        } catch (err) {\r\n          const errorMessage = err.response?.data?.message || \r\n                              err.response?.data?.error || \r\n                              'Ошибка при авторизации';\r\n          alert(errorMessage);\r\n          console.error('Ошибка входа:', err.response?.data || err);\r\n        }\r\n      };\r\n      \r\n  \r\n    return (\r\n      <>\r\n        <h2>Вход</h2>\r\n        <AuthForm type=\"login\" onSubmit={handleLogin} />\r\n      </>\r\n    );\r\n  };\r\n\r\nexport default LoginPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,GAAG,MAAM,QAAQ;AACxB,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9B,MAAMU,WAAW,GAAG,MAAOC,QAAQ,IAAK;IACpC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACY,IAAI,CAAC,aAAa,EAAE;QAC7CC,KAAK,EAAEH,QAAQ,CAACG,KAAK;QACrBC,QAAQ,EAAEJ,QAAQ,CAACI;MACrB,CAAC,CAAC;MAEFC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACQ,IAAI,CAACC,IAAI,CAAC,CAAC;MAChEL,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEL,QAAQ,CAACQ,IAAI,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;MACxDN,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACQ,IAAI,CAACG,KAAK,CAAC;MAElDC,KAAK,CAAC,mBAAmB,CAAC;MAC1BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,OAAO;IAChC,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA,EAAAC,cAAA,EAAAC,mBAAA,EAAAC,cAAA;MACZ,MAAMC,YAAY,GAAG,EAAAL,aAAA,GAAAD,GAAG,CAAChB,QAAQ,cAAAiB,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcT,IAAI,cAAAU,kBAAA,uBAAlBA,kBAAA,CAAoBK,OAAO,OAAAJ,cAAA,GAC5BH,GAAG,CAAChB,QAAQ,cAAAmB,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcX,IAAI,cAAAY,mBAAA,uBAAlBA,mBAAA,CAAoBI,KAAK,KACzB,wBAAwB;MAC5CZ,KAAK,CAACU,YAAY,CAAC;MACnBG,OAAO,CAACD,KAAK,CAAC,eAAe,EAAE,EAAAH,cAAA,GAAAL,GAAG,CAAChB,QAAQ,cAAAqB,cAAA,uBAAZA,cAAA,CAAcb,IAAI,KAAIQ,GAAG,CAAC;IAC3D;EACF,CAAC;EAGH,oBACExB,OAAA,CAAAE,SAAA;IAAAgC,QAAA,gBACElC,OAAA;MAAAkC,QAAA,EAAI;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACbtC,OAAA,CAACF,QAAQ;MAACyC,IAAI,EAAC,OAAO;MAACC,QAAQ,EAAElC;IAAY;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAChD,CAAC;AAEP,CAAC;AAAClC,EAAA,CAhCED,SAAS;EAAA,QACMP,WAAW;AAAA;AAAA6C,EAAA,GAD1BtC,SAAS;AAkCf,eAAeA,SAAS;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}