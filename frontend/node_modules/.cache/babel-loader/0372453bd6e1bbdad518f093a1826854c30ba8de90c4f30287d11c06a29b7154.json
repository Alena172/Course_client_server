{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Course_rksp\\\\frontend\\\\src\\\\components\\\\NewsFeed.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import API from '../api';\n// import './NewsFeed.css';\n// import { getSafeImageUrl } from '../utils/imageUtils';\n// import { useNavigate } from 'react-router-dom';\n\n// const NewsFeed = () => {\n//   const [news, setNews] = useState([]);\n//   const [recommendations, setRecommendations] = useState([]);\n//   const [journalEntries, setJournalEntries] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [loadingRecs, setLoadingRecs] = useState(false);\n//   const [error, setError] = useState('');\n//   const [searchQuery, setSearchQuery] = useState('');\n//   const [searchResults, setSearchResults] = useState([]);\n//   const [isSearching, setIsSearching] = useState(false);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [totalResults, setTotalResults] = useState(0);\n//   const [pageSize] = useState(10);\n//   const [searchTimeout, setSearchTimeout] = useState(null);\n//   const [recPageSize] = useState(12); \n//   const [seenUrls, setSeenUrls] = useState(new Set());\n//   const navigate = useNavigate();\n\n//   const extractKeywords = (title = '', description = '') => {\n//     const text = `${title} ${description}`.toLowerCase();\n//     const stopWords = new Set(['the', 'and', 'for', 'with', 'this', 'that', 'are', 'was']);\n\n//     const words = text.split(/\\W+/)\n//       .filter(word => word.length > 3 && !stopWords.has(word));\n\n//     const keywordFrequency = {};\n//     words.forEach(word => {\n//       keywordFrequency[word] = (keywordFrequency[word] || 0) + 1;\n//     });\n\n//     return {\n//       keywords: Object.keys(keywordFrequency)\n//         .sort((a, b) => keywordFrequency[b] - keywordFrequency[a])\n//         .slice(0, 5)\n//     };\n//   };\n\n//   const handlePageChange = (newPage) => {\n//     if (newPage > 0 && newPage <= Math.ceil(totalResults / pageSize)) {\n//       handleSearch(searchQuery, newPage);\n//       window.scrollTo({ top: 0, behavior: 'smooth' });\n//     }\n//   };\n\n//   const fetchNews = async () => {\n//     try {\n//       const response = await API.get('/api/news/proxy/newsapi', {\n//         params: {\n//           endpoint: 'top-headlines',\n//           country: 'us'\n//         }\n//       });\n//       setNews(response.data.articles);\n//     } catch (err) {\n//       setError('Ошибка при загрузке новостей');\n//       console.error(err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSearch = async (query, page = 1) => {\n//     if (!query.trim()) {\n//       setSearchResults([]);\n//       setTotalResults(0);\n//       return;\n//     }\n\n//     setIsSearching(true);\n//     try {\n//       const response = await API.get('/api/news/proxy/newsapi', {\n//         params: {\n//           endpoint: 'everything',\n//           q: query,\n//           page,\n//           pageSize: pageSize\n//         }\n//       });\n\n//       if (response.data?.articles) {\n//         setSearchResults(response.data.articles);\n//         setTotalResults(response.data.totalResults);\n//         setCurrentPage(page);\n//       } else {\n//         setSearchResults([]);\n//         setTotalResults(0);\n//       }\n//     } catch (err) {\n//       console.error('Search error:', err);\n//       setSearchResults([]);\n//       setTotalResults(0);\n//     } finally {\n//       setIsSearching(false);\n//     }\n//   };\n\n//   const handleSearchChange = (e) => {\n//     const query = e.target.value;\n//     setSearchQuery(query);\n//     setCurrentPage(1);\n\n//     if (searchTimeout) {\n//       clearTimeout(searchTimeout);\n//     }\n\n//     if (query.length > 2) {\n//       const timeoutId = setTimeout(() => {\n//         handleSearch(query, 1);\n//       }, 2000);\n\n//       setSearchTimeout(timeoutId);\n//     } else {\n//       setSearchResults([]);\n//       setTotalResults(0);\n//     }\n//   };\n\n//   useEffect(() => {\n//     return () => {\n//       if (searchTimeout) {\n//         clearTimeout(searchTimeout);\n//       }\n//     };\n//   }, [searchTimeout]);\n\n//   const categorizeContent = (title = '', description = '') => {\n//     const text = `${title} ${description}`.toLowerCase();\n//     const categories = [];\n\n//     if (/(tech|ai|robot|computer|software)/.test(text)) categories.push('technology');\n//     if (/(business|market|economy|stock)/.test(text)) categories.push('business');\n//     if (/(science|research|space|medicine)/.test(text)) categories.push('science');\n//     if (/(politics|government|election)/.test(text)) categories.push('politics');\n//     if (/(sport|football|basketball)/.test(text)) categories.push('sports');\n//     if (/(game|gaming|esports|videogame|playstation|xbox|nintendo|steam|pc game)/.test(text)) categories.push('games');\n\n//     return categories.length > 0 ? categories : ['general'];\n//   };\n\n//   const handleImageError = (index) => {\n//     setNews(prevNews => prevNews.filter((_, i) => i !== index));\n//   };\n\n//   const handleRecImageError = (index) => {\n//     setRecommendations(prevRecs => prevRecs.filter((_, i) => i !== index));\n//   };\n\n//   const fetchRecommendations = async () => {\n//     try {\n//       const userId = localStorage.getItem('userId');\n//       if (!userId) return;\n//       setLoadingRecs(true);\n//       const journalResponse = await API.get(`/api/news/${userId}/journal`);\n//       setJournalEntries(journalResponse.data);\n//       const response = await API.get(`/api/news/recommendations/${userId}`, {\n//         params: {\n//           limit: recPageSize\n//         }\n//       });\n//       if (response.data) {\n//         const uniqueRecommendations = response.data.recommendations\n//           .filter(item => !seenUrls.has(item.url));\n//         setSeenUrls(prev => {\n//           const newSet = new Set(prev);\n//           uniqueRecommendations.forEach(item => newSet.add(item.url));\n//           return newSet;\n//         });\n//         setRecommendations(uniqueRecommendations);\n//       }\n//     } catch (err) {\n//       console.error('Ошибка загрузки рекомендаций:', err);\n//     } finally {\n//       setLoadingRecs(false);\n//     }\n//   };\n\n//   const refreshRecommendations = () => {\n//     setSeenUrls(new Set()); \n//   };\n\n//   const handleAddToJournal = async (newsItem) => {\n//     try {\n//       const userId = localStorage.getItem('userId');\n//       const token = localStorage.getItem('token');\n//       if (!userId || !token) {\n//         alert('Для добавления в журнал необходимо авторизоваться');\n//         return;\n//       }\n//       const { keywords } = extractKeywords(newsItem.title, newsItem.description);\n//       const categories = categorizeContent(newsItem.title, newsItem.description);\n//       const entryData = {\n//         userId,\n//         url: newsItem.url,\n//         source: newsItem.source?.name || 'unknown',\n//         title: newsItem.title || '',\n//         description: newsItem.description || '',\n//         content: newsItem.content || newsItem.description || '',\n//         imageUrl: newsItem.urlToImage || newsItem.imageUrl || '',\n//         publishedAt: newsItem.publishedAt || new Date().toISOString(),\n//         author: newsItem.author || '',\n//         keywords,\n//         categories\n//       };\n//       console.log('Отправляемые данные:', entryData);\n//       await API.post('/api/news/journal', entryData, {\n//         headers: {\n//           Authorization: `Bearer ${token}`\n//         }\n//       });\n//       alert('Новость успешно добавлена в журнал');\n//       fetchRecommendations();\n//     } catch (err) {\n//       console.error('Ошибка добавления:', err);\n//       alert(err.response?.data?.message || 'Ошибка при добавлении в журнал');\n//     }\n//   };\n\n//   const handleGoToJournal = () => {\n//     navigate('/journal');\n//   };\n\n//   useEffect(() => {\n//     fetchNews();\n//   }, []);\n\n//   useEffect(() => {\n//     fetchRecommendations();\n//   }, []);\n\n//   if (loading) return <div className=\"loading\">Загрузка новостей...</div>;\n//   if (error) return <div className=\"error\">{error}</div>;\n\n//   return (\n//     <div className=\"news-feed\">\n//       <div className=\"news-feed-header\">\n//         <h2 className=\"news-feed-title\">Новостная лента</h2>\n//         <div className=\"search-container\">\n//           <input\n//             type=\"text\"\n//             placeholder=\"Поиск новостей...\"\n//             value={searchQuery}\n//             onChange={handleSearchChange}\n//             className=\"search-input\"\n//           />\n//           {isSearching && <div className=\"search-spinner\">Загрузка...</div>}\n//         </div>\n//         <button \n//           onClick={handleGoToJournal}\n//           className=\"journal-button\"\n//         >\n//           Мой журнал\n//         </button>\n//       </div>\n\n//       {searchResults.length > 0 ? (\n//         <div className=\"search-results-section\">\n//           <h3 className=\"search-results-title\">\n//             Результаты поиска по запросу: \"{searchQuery}\" ({totalResults} найдено)\n//           </h3>\n//           <div className=\"news-grid\">\n//             {searchResults.map((newsItem, index) => (\n//               <article key={`search-${index}-${Date.now()}`} className=\"news-card\">\n//                 {newsItem.urlToImage && (\n//                   <div className=\"image-container\">\n//                     <img \n//                       src={newsItem.urlToImage} \n//                       alt={newsItem.title} \n//                       className=\"news-image\"\n//                       onError={() => handleImageError(index)}\n//                     />\n//                   </div>\n//                 )}\n//                 <div className=\"card-content\">\n//                   <h3 className=\"news-title\">{newsItem.title}</h3>\n//                   <p className=\"news-description\">{newsItem.description}</p>\n//                   <div className=\"card-footer\">\n//                     <a \n//                       href={newsItem.url} \n//                       target=\"_blank\" \n//                       rel=\"noopener noreferrer\"\n//                       className=\"read-more\"\n//                     >\n//                       Читать полностью\n//                     </a>\n//                     <div className=\"action-buttons\">\n//                       <button \n//                         onClick={() => handleAddToJournal(newsItem)}\n//                         className=\"add-button\"\n//                       >\n//                         Сохранить\n//                       </button>\n//                     </div>\n//                   </div>\n//                 </div>\n//               </article>\n//             ))}\n//           </div>\n\n//           {totalResults > pageSize && (\n//             <div className=\"pagination\">\n//               <button\n//                 onClick={() => handlePageChange(currentPage - 1)}\n//                 disabled={currentPage === 1 || isSearching}\n//                 className=\"pagination-button\"\n//               >\n//                 Назад\n//               </button>\n\n//               <div className=\"page-numbers\">\n//                 {Array.from({ length: Math.min(5, Math.ceil(totalResults / pageSize)) }, (_, i) => {\n//                   let pageNum;\n//                   if (Math.ceil(totalResults / pageSize) <= 5) {\n//                     pageNum = i + 1;\n//                   } else if (currentPage <= 3) {\n//                     pageNum = i + 1;\n//                   } else if (currentPage >= Math.ceil(totalResults / pageSize) - 2) {\n//                     pageNum = Math.ceil(totalResults / pageSize) - 4 + i;\n//                   } else {\n//                     pageNum = currentPage - 2 + i;\n//                   }\n\n//                   return (\n//                     <button\n//                       key={pageNum}\n//                       onClick={() => handlePageChange(pageNum)}\n//                       disabled={isSearching}\n//                       className={`page-button ${currentPage === pageNum ? 'active' : ''}`}\n//                     >\n//                       {pageNum}\n//                     </button>\n//                   );\n//                 })}\n//               </div>\n\n//               <button\n//                 onClick={() => handlePageChange(currentPage + 1)}\n//                 disabled={currentPage === Math.ceil(totalResults / pageSize) || isSearching}\n//                 className=\"pagination-button\"\n//               >\n//                 Вперед\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"recommendations-section\">\n//             <div className=\"recommendations-header\">\n//               <h2 className=\"recommendations-title\">\n//                 Рекомендуем вам\n//                 {loadingRecs && <span className=\"loading-indicator\"> (загрузка...)</span>}\n//               </h2>\n//               <button \n//                 onClick={refreshRecommendations}\n//                 className=\"refresh-button\"\n//                 disabled={loadingRecs}\n//               >\n//                 Показать другие\n//               </button>\n//             </div>\n\n//             {!loadingRecs && recommendations.length === 0 ? (\n//               <p className=\"no-recs\">\n//                 {journalEntries.length > 0 \n//                   ? \"Не удалось найти рекомендации. Попробуйте добавить больше новостей.\"\n//                   : \"Добавьте новости в журнал, чтобы получить рекомендации\"}\n//               </p>\n//             ) : (\n//               <>\n//                 <div className=\"recommendations-grid\">\n//                   {recommendations.map((item, index) => (\n//                     <article key={`rec-${index}`} className=\"recommendation-card\">\n//                       {item.imageUrl && (\n//                         <div className=\"image-container\">\n//                           <img \n//                             src={getSafeImageUrl(item.imageUrl)} \n//                             alt={item.title}\n//                             onError={() => handleRecImageError(index)}\n//                           />\n//                         </div>\n//                       )}\n//                       <div className=\"rec-content\">\n//                         <h3 className=\"rec-title\">{item.title}</h3>\n//                         <p className=\"rec-description\">{item.description}</p>\n//                         <div className=\"rec-footer\">\n//                           <a \n//                             href={item.url} \n//                             target=\"_blank\" \n//                             rel=\"noopener noreferrer\"\n//                             className=\"rec-link\"\n//                           >\n//                             Читать\n//                           </a>\n//                           <div className=\"rec-actions\">\n//                             <button \n//                               onClick={() => handleAddToJournal(item)}\n//                               className=\"rec-add-button\"\n//                             >\n//                               Сохранить\n//                             </button>\n//                           </div>\n//                         </div>\n//                       </div>\n//                     </article>\n//                   ))}\n//                 </div>\n//               </>\n//             )}\n//           </div>\n\n//           <div className=\"latest-news-section\">\n//             <h2 className=\"latest-news-title\">Последние новости</h2>\n\n//             {news.length === 0 ? (\n//               <p className=\"no-news\">Нет доступных новостей</p>\n//             ) : (\n//               <div className=\"news-grid\">\n//                 {news.map((newsItem, index) => (\n//                   <article key={`${newsItem.source?.id || index}-${index}`} className=\"news-card\">\n//                     {newsItem.urlToImage && (\n//                       <div className=\"image-container\">\n//                         <img \n//                           src={newsItem.urlToImage} \n//                           alt={newsItem.title} \n//                           className=\"news-image\"\n//                           onError={() => handleImageError(index)}\n//                         />\n//                       </div>\n//                     )}\n//                     <div className=\"card-content\">\n//                       <h3 className=\"news-title\">{newsItem.title}</h3>\n//                       <p className=\"news-description\">{newsItem.description}</p>\n//                       <div className=\"card-footer\">\n//                         <a \n//                           href={newsItem.url} \n//                           target=\"_blank\" \n//                           rel=\"noopener noreferrer\"\n//                           className=\"read-more\"\n//                         >\n//                           Читать полностью\n//                         </a>\n//                         <div className=\"action-buttons\">\n//                           <button \n//                             onClick={() => handleAddToJournal(newsItem)}\n//                             className=\"add-button\"\n//                           >\n//                             Сохранить\n//                           </button>\n//                         </div>\n//                       </div>\n//                     </div>\n//                   </article>\n//                 ))}\n//               </div>\n//             )}\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default NewsFeed;\n\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport SearchNews from './SearchNews';\nimport Recommendations from './Recommendations';\nimport LatestNews from './LatestNews';\n// import { extractKeywords, categorizeContent } from '../utils/newsUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewsFeed = () => {\n  _s();\n  const navigate = useNavigate();\n  const handleAddToJournal = async newsItem => {\n    var _newsItem$source;\n    const userId = localStorage.getItem('userId');\n    const token = localStorage.getItem('token');\n    if (!userId || !token) {\n      alert('Авторизуйтесь для добавления в журнал');\n      return;\n    }\n    const entry = {\n      userId,\n      url: newsItem.url,\n      source: ((_newsItem$source = newsItem.source) === null || _newsItem$source === void 0 ? void 0 : _newsItem$source.name) || 'unknown',\n      title: newsItem.title || '',\n      description: newsItem.description || '',\n      content: newsItem.content || newsItem.description || '',\n      imageUrl: newsItem.urlToImage || newsItem.imageUrl || '',\n      publishedAt: newsItem.publishedAt || new Date().toISOString(),\n      author: newsItem.author || '',\n      keywords: extractKeywords(newsItem.title, newsItem.description).keywords,\n      categories: categorizeContent(newsItem.title, newsItem.description)\n    };\n    try {\n      await fetch('/api/news/journal', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(entry)\n      });\n      alert('Сохранено в журнал');\n    } catch (err) {\n      console.error(err);\n      alert('Ошибка при сохранении');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"news-feed\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u041D\\u043E\\u0432\\u043E\\u0441\\u0442\\u043D\\u0430\\u044F \\u043B\\u0435\\u043D\\u0442\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/journal'),\n      className: \"journal-button\",\n      children: \"\\u041C\\u043E\\u0439 \\u0436\\u0443\\u0440\\u043D\\u0430\\u043B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchNews, {\n      onAddToJournal: handleAddToJournal,\n      extractKeywords: extractKeywords,\n      categorizeContent: categorizeContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Recommendations, {\n      onAddToJournal: handleAddToJournal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LatestNews, {\n      onAddToJournal: handleAddToJournal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 523,\n    columnNumber: 5\n  }, this);\n};\n_s(NewsFeed, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = NewsFeed;\nexport default NewsFeed;\nvar _c;\n$RefreshReg$(_c, \"NewsFeed\");","map":{"version":3,"names":["React","useNavigate","SearchNews","Recommendations","LatestNews","jsxDEV","_jsxDEV","NewsFeed","_s","navigate","handleAddToJournal","newsItem","_newsItem$source","userId","localStorage","getItem","token","alert","entry","url","source","name","title","description","content","imageUrl","urlToImage","publishedAt","Date","toISOString","author","keywords","extractKeywords","categories","categorizeContent","fetch","method","headers","Authorization","body","JSON","stringify","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onAddToJournal","_c","$RefreshReg$"],"sources":["D:/Study/Course_rksp/frontend/src/components/NewsFeed.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import API from '../api';\r\n// import './NewsFeed.css';\r\n// import { getSafeImageUrl } from '../utils/imageUtils';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// const NewsFeed = () => {\r\n//   const [news, setNews] = useState([]);\r\n//   const [recommendations, setRecommendations] = useState([]);\r\n//   const [journalEntries, setJournalEntries] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [loadingRecs, setLoadingRecs] = useState(false);\r\n//   const [error, setError] = useState('');\r\n//   const [searchQuery, setSearchQuery] = useState('');\r\n//   const [searchResults, setSearchResults] = useState([]);\r\n//   const [isSearching, setIsSearching] = useState(false);\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [totalResults, setTotalResults] = useState(0);\r\n//   const [pageSize] = useState(10);\r\n//   const [searchTimeout, setSearchTimeout] = useState(null);\r\n//   const [recPageSize] = useState(12); \r\n//   const [seenUrls, setSeenUrls] = useState(new Set());\r\n//   const navigate = useNavigate();\r\n\r\n//   const extractKeywords = (title = '', description = '') => {\r\n//     const text = `${title} ${description}`.toLowerCase();\r\n//     const stopWords = new Set(['the', 'and', 'for', 'with', 'this', 'that', 'are', 'was']);\r\n    \r\n//     const words = text.split(/\\W+/)\r\n//       .filter(word => word.length > 3 && !stopWords.has(word));\r\n    \r\n//     const keywordFrequency = {};\r\n//     words.forEach(word => {\r\n//       keywordFrequency[word] = (keywordFrequency[word] || 0) + 1;\r\n//     });\r\n    \r\n//     return {\r\n//       keywords: Object.keys(keywordFrequency)\r\n//         .sort((a, b) => keywordFrequency[b] - keywordFrequency[a])\r\n//         .slice(0, 5)\r\n//     };\r\n//   };\r\n\r\n//   const handlePageChange = (newPage) => {\r\n//     if (newPage > 0 && newPage <= Math.ceil(totalResults / pageSize)) {\r\n//       handleSearch(searchQuery, newPage);\r\n//       window.scrollTo({ top: 0, behavior: 'smooth' });\r\n//     }\r\n//   };\r\n\r\n//   const fetchNews = async () => {\r\n//     try {\r\n//       const response = await API.get('/api/news/proxy/newsapi', {\r\n//         params: {\r\n//           endpoint: 'top-headlines',\r\n//           country: 'us'\r\n//         }\r\n//       });\r\n//       setNews(response.data.articles);\r\n//     } catch (err) {\r\n//       setError('Ошибка при загрузке новостей');\r\n//       console.error(err);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleSearch = async (query, page = 1) => {\r\n//     if (!query.trim()) {\r\n//       setSearchResults([]);\r\n//       setTotalResults(0);\r\n//       return;\r\n//     }\r\n\r\n//     setIsSearching(true);\r\n//     try {\r\n//       const response = await API.get('/api/news/proxy/newsapi', {\r\n//         params: {\r\n//           endpoint: 'everything',\r\n//           q: query,\r\n//           page,\r\n//           pageSize: pageSize\r\n//         }\r\n//       });\r\n      \r\n//       if (response.data?.articles) {\r\n//         setSearchResults(response.data.articles);\r\n//         setTotalResults(response.data.totalResults);\r\n//         setCurrentPage(page);\r\n//       } else {\r\n//         setSearchResults([]);\r\n//         setTotalResults(0);\r\n//       }\r\n//     } catch (err) {\r\n//       console.error('Search error:', err);\r\n//       setSearchResults([]);\r\n//       setTotalResults(0);\r\n//     } finally {\r\n//       setIsSearching(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleSearchChange = (e) => {\r\n//     const query = e.target.value;\r\n//     setSearchQuery(query);\r\n//     setCurrentPage(1);\r\n\r\n//     if (searchTimeout) {\r\n//       clearTimeout(searchTimeout);\r\n//     }\r\n\r\n//     if (query.length > 2) {\r\n//       const timeoutId = setTimeout(() => {\r\n//         handleSearch(query, 1);\r\n//       }, 2000);\r\n      \r\n//       setSearchTimeout(timeoutId);\r\n//     } else {\r\n//       setSearchResults([]);\r\n//       setTotalResults(0);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     return () => {\r\n//       if (searchTimeout) {\r\n//         clearTimeout(searchTimeout);\r\n//       }\r\n//     };\r\n//   }, [searchTimeout]);\r\n\r\n//   const categorizeContent = (title = '', description = '') => {\r\n//     const text = `${title} ${description}`.toLowerCase();\r\n//     const categories = [];\r\n    \r\n//     if (/(tech|ai|robot|computer|software)/.test(text)) categories.push('technology');\r\n//     if (/(business|market|economy|stock)/.test(text)) categories.push('business');\r\n//     if (/(science|research|space|medicine)/.test(text)) categories.push('science');\r\n//     if (/(politics|government|election)/.test(text)) categories.push('politics');\r\n//     if (/(sport|football|basketball)/.test(text)) categories.push('sports');\r\n//     if (/(game|gaming|esports|videogame|playstation|xbox|nintendo|steam|pc game)/.test(text)) categories.push('games');\r\n    \r\n//     return categories.length > 0 ? categories : ['general'];\r\n//   };\r\n\r\n//   const handleImageError = (index) => {\r\n//     setNews(prevNews => prevNews.filter((_, i) => i !== index));\r\n//   };\r\n\r\n//   const handleRecImageError = (index) => {\r\n//     setRecommendations(prevRecs => prevRecs.filter((_, i) => i !== index));\r\n//   };\r\n\r\n//   const fetchRecommendations = async () => {\r\n//     try {\r\n//       const userId = localStorage.getItem('userId');\r\n//       if (!userId) return;\r\n//       setLoadingRecs(true);\r\n//       const journalResponse = await API.get(`/api/news/${userId}/journal`);\r\n//       setJournalEntries(journalResponse.data);\r\n//       const response = await API.get(`/api/news/recommendations/${userId}`, {\r\n//         params: {\r\n//           limit: recPageSize\r\n//         }\r\n//       });\r\n//       if (response.data) {\r\n//         const uniqueRecommendations = response.data.recommendations\r\n//           .filter(item => !seenUrls.has(item.url));\r\n//         setSeenUrls(prev => {\r\n//           const newSet = new Set(prev);\r\n//           uniqueRecommendations.forEach(item => newSet.add(item.url));\r\n//           return newSet;\r\n//         });\r\n//         setRecommendations(uniqueRecommendations);\r\n//       }\r\n//     } catch (err) {\r\n//       console.error('Ошибка загрузки рекомендаций:', err);\r\n//     } finally {\r\n//       setLoadingRecs(false);\r\n//     }\r\n//   };\r\n\r\n//   const refreshRecommendations = () => {\r\n//     setSeenUrls(new Set()); \r\n//   };\r\n\r\n//   const handleAddToJournal = async (newsItem) => {\r\n//     try {\r\n//       const userId = localStorage.getItem('userId');\r\n//       const token = localStorage.getItem('token');\r\n//       if (!userId || !token) {\r\n//         alert('Для добавления в журнал необходимо авторизоваться');\r\n//         return;\r\n//       }\r\n//       const { keywords } = extractKeywords(newsItem.title, newsItem.description);\r\n//       const categories = categorizeContent(newsItem.title, newsItem.description);\r\n//       const entryData = {\r\n//         userId,\r\n//         url: newsItem.url,\r\n//         source: newsItem.source?.name || 'unknown',\r\n//         title: newsItem.title || '',\r\n//         description: newsItem.description || '',\r\n//         content: newsItem.content || newsItem.description || '',\r\n//         imageUrl: newsItem.urlToImage || newsItem.imageUrl || '',\r\n//         publishedAt: newsItem.publishedAt || new Date().toISOString(),\r\n//         author: newsItem.author || '',\r\n//         keywords,\r\n//         categories\r\n//       };\r\n//       console.log('Отправляемые данные:', entryData);\r\n//       await API.post('/api/news/journal', entryData, {\r\n//         headers: {\r\n//           Authorization: `Bearer ${token}`\r\n//         }\r\n//       });\r\n//       alert('Новость успешно добавлена в журнал');\r\n//       fetchRecommendations();\r\n//     } catch (err) {\r\n//       console.error('Ошибка добавления:', err);\r\n//       alert(err.response?.data?.message || 'Ошибка при добавлении в журнал');\r\n//     }\r\n//   };\r\n\r\n//   const handleGoToJournal = () => {\r\n//     navigate('/journal');\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchNews();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     fetchRecommendations();\r\n//   }, []);\r\n\r\n//   if (loading) return <div className=\"loading\">Загрузка новостей...</div>;\r\n//   if (error) return <div className=\"error\">{error}</div>;\r\n\r\n//   return (\r\n//     <div className=\"news-feed\">\r\n//       <div className=\"news-feed-header\">\r\n//         <h2 className=\"news-feed-title\">Новостная лента</h2>\r\n//         <div className=\"search-container\">\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Поиск новостей...\"\r\n//             value={searchQuery}\r\n//             onChange={handleSearchChange}\r\n//             className=\"search-input\"\r\n//           />\r\n//           {isSearching && <div className=\"search-spinner\">Загрузка...</div>}\r\n//         </div>\r\n//         <button \r\n//           onClick={handleGoToJournal}\r\n//           className=\"journal-button\"\r\n//         >\r\n//           Мой журнал\r\n//         </button>\r\n//       </div>\r\n      \r\n//       {searchResults.length > 0 ? (\r\n//         <div className=\"search-results-section\">\r\n//           <h3 className=\"search-results-title\">\r\n//             Результаты поиска по запросу: \"{searchQuery}\" ({totalResults} найдено)\r\n//           </h3>\r\n//           <div className=\"news-grid\">\r\n//             {searchResults.map((newsItem, index) => (\r\n//               <article key={`search-${index}-${Date.now()}`} className=\"news-card\">\r\n//                 {newsItem.urlToImage && (\r\n//                   <div className=\"image-container\">\r\n//                     <img \r\n//                       src={newsItem.urlToImage} \r\n//                       alt={newsItem.title} \r\n//                       className=\"news-image\"\r\n//                       onError={() => handleImageError(index)}\r\n//                     />\r\n//                   </div>\r\n//                 )}\r\n//                 <div className=\"card-content\">\r\n//                   <h3 className=\"news-title\">{newsItem.title}</h3>\r\n//                   <p className=\"news-description\">{newsItem.description}</p>\r\n//                   <div className=\"card-footer\">\r\n//                     <a \r\n//                       href={newsItem.url} \r\n//                       target=\"_blank\" \r\n//                       rel=\"noopener noreferrer\"\r\n//                       className=\"read-more\"\r\n//                     >\r\n//                       Читать полностью\r\n//                     </a>\r\n//                     <div className=\"action-buttons\">\r\n//                       <button \r\n//                         onClick={() => handleAddToJournal(newsItem)}\r\n//                         className=\"add-button\"\r\n//                       >\r\n//                         Сохранить\r\n//                       </button>\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               </article>\r\n//             ))}\r\n//           </div>\r\n  \r\n//           {totalResults > pageSize && (\r\n//             <div className=\"pagination\">\r\n//               <button\r\n//                 onClick={() => handlePageChange(currentPage - 1)}\r\n//                 disabled={currentPage === 1 || isSearching}\r\n//                 className=\"pagination-button\"\r\n//               >\r\n//                 Назад\r\n//               </button>\r\n              \r\n//               <div className=\"page-numbers\">\r\n//                 {Array.from({ length: Math.min(5, Math.ceil(totalResults / pageSize)) }, (_, i) => {\r\n//                   let pageNum;\r\n//                   if (Math.ceil(totalResults / pageSize) <= 5) {\r\n//                     pageNum = i + 1;\r\n//                   } else if (currentPage <= 3) {\r\n//                     pageNum = i + 1;\r\n//                   } else if (currentPage >= Math.ceil(totalResults / pageSize) - 2) {\r\n//                     pageNum = Math.ceil(totalResults / pageSize) - 4 + i;\r\n//                   } else {\r\n//                     pageNum = currentPage - 2 + i;\r\n//                   }\r\n                  \r\n//                   return (\r\n//                     <button\r\n//                       key={pageNum}\r\n//                       onClick={() => handlePageChange(pageNum)}\r\n//                       disabled={isSearching}\r\n//                       className={`page-button ${currentPage === pageNum ? 'active' : ''}`}\r\n//                     >\r\n//                       {pageNum}\r\n//                     </button>\r\n//                   );\r\n//                 })}\r\n//               </div>\r\n              \r\n//               <button\r\n//                 onClick={() => handlePageChange(currentPage + 1)}\r\n//                 disabled={currentPage === Math.ceil(totalResults / pageSize) || isSearching}\r\n//                 className=\"pagination-button\"\r\n//               >\r\n//                 Вперед\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       ) : (\r\n//         <>\r\n//           <div className=\"recommendations-section\">\r\n//             <div className=\"recommendations-header\">\r\n//               <h2 className=\"recommendations-title\">\r\n//                 Рекомендуем вам\r\n//                 {loadingRecs && <span className=\"loading-indicator\"> (загрузка...)</span>}\r\n//               </h2>\r\n//               <button \r\n//                 onClick={refreshRecommendations}\r\n//                 className=\"refresh-button\"\r\n//                 disabled={loadingRecs}\r\n//               >\r\n//                 Показать другие\r\n//               </button>\r\n//             </div>\r\n            \r\n//             {!loadingRecs && recommendations.length === 0 ? (\r\n//               <p className=\"no-recs\">\r\n//                 {journalEntries.length > 0 \r\n//                   ? \"Не удалось найти рекомендации. Попробуйте добавить больше новостей.\"\r\n//                   : \"Добавьте новости в журнал, чтобы получить рекомендации\"}\r\n//               </p>\r\n//             ) : (\r\n//               <>\r\n//                 <div className=\"recommendations-grid\">\r\n//                   {recommendations.map((item, index) => (\r\n//                     <article key={`rec-${index}`} className=\"recommendation-card\">\r\n//                       {item.imageUrl && (\r\n//                         <div className=\"image-container\">\r\n//                           <img \r\n//                             src={getSafeImageUrl(item.imageUrl)} \r\n//                             alt={item.title}\r\n//                             onError={() => handleRecImageError(index)}\r\n//                           />\r\n//                         </div>\r\n//                       )}\r\n//                       <div className=\"rec-content\">\r\n//                         <h3 className=\"rec-title\">{item.title}</h3>\r\n//                         <p className=\"rec-description\">{item.description}</p>\r\n//                         <div className=\"rec-footer\">\r\n//                           <a \r\n//                             href={item.url} \r\n//                             target=\"_blank\" \r\n//                             rel=\"noopener noreferrer\"\r\n//                             className=\"rec-link\"\r\n//                           >\r\n//                             Читать\r\n//                           </a>\r\n//                           <div className=\"rec-actions\">\r\n//                             <button \r\n//                               onClick={() => handleAddToJournal(item)}\r\n//                               className=\"rec-add-button\"\r\n//                             >\r\n//                               Сохранить\r\n//                             </button>\r\n//                           </div>\r\n//                         </div>\r\n//                       </div>\r\n//                     </article>\r\n//                   ))}\r\n//                 </div>\r\n//               </>\r\n//             )}\r\n//           </div>\r\n  \r\n//           <div className=\"latest-news-section\">\r\n//             <h2 className=\"latest-news-title\">Последние новости</h2>\r\n            \r\n//             {news.length === 0 ? (\r\n//               <p className=\"no-news\">Нет доступных новостей</p>\r\n//             ) : (\r\n//               <div className=\"news-grid\">\r\n//                 {news.map((newsItem, index) => (\r\n//                   <article key={`${newsItem.source?.id || index}-${index}`} className=\"news-card\">\r\n//                     {newsItem.urlToImage && (\r\n//                       <div className=\"image-container\">\r\n//                         <img \r\n//                           src={newsItem.urlToImage} \r\n//                           alt={newsItem.title} \r\n//                           className=\"news-image\"\r\n//                           onError={() => handleImageError(index)}\r\n//                         />\r\n//                       </div>\r\n//                     )}\r\n//                     <div className=\"card-content\">\r\n//                       <h3 className=\"news-title\">{newsItem.title}</h3>\r\n//                       <p className=\"news-description\">{newsItem.description}</p>\r\n//                       <div className=\"card-footer\">\r\n//                         <a \r\n//                           href={newsItem.url} \r\n//                           target=\"_blank\" \r\n//                           rel=\"noopener noreferrer\"\r\n//                           className=\"read-more\"\r\n//                         >\r\n//                           Читать полностью\r\n//                         </a>\r\n//                         <div className=\"action-buttons\">\r\n//                           <button \r\n//                             onClick={() => handleAddToJournal(newsItem)}\r\n//                             className=\"add-button\"\r\n//                           >\r\n//                             Сохранить\r\n//                           </button>\r\n//                         </div>\r\n//                       </div>\r\n//                     </div>\r\n//                   </article>\r\n//                 ))}\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default NewsFeed;\r\n\r\n\r\n\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SearchNews from './SearchNews';\r\nimport Recommendations from './Recommendations';\r\nimport LatestNews from './LatestNews';\r\n// import { extractKeywords, categorizeContent } from '../utils/newsUtils';\r\n\r\nconst NewsFeed = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleAddToJournal = async (newsItem) => {\r\n    const userId = localStorage.getItem('userId');\r\n    const token = localStorage.getItem('token');\r\n    if (!userId || !token) {\r\n      alert('Авторизуйтесь для добавления в журнал');\r\n      return;\r\n    }\r\n\r\n    const entry = {\r\n      userId,\r\n      url: newsItem.url,\r\n      source: newsItem.source?.name || 'unknown',\r\n      title: newsItem.title || '',\r\n      description: newsItem.description || '',\r\n      content: newsItem.content || newsItem.description || '',\r\n      imageUrl: newsItem.urlToImage || newsItem.imageUrl || '',\r\n      publishedAt: newsItem.publishedAt || new Date().toISOString(),\r\n      author: newsItem.author || '',\r\n      keywords: extractKeywords(newsItem.title, newsItem.description).keywords,\r\n      categories: categorizeContent(newsItem.title, newsItem.description)\r\n    };\r\n\r\n    try {\r\n      await fetch('/api/news/journal', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(entry)\r\n      });\r\n      alert('Сохранено в журнал');\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert('Ошибка при сохранении');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"news-feed\">\r\n      <h2>Новостная лента</h2>\r\n      <button onClick={() => navigate('/journal')} className=\"journal-button\">Мой журнал</button>\r\n      <SearchNews \r\n        onAddToJournal={handleAddToJournal} \r\n        extractKeywords={extractKeywords} \r\n        categorizeContent={categorizeContent} \r\n      />\r\n      <Recommendations onAddToJournal={handleAddToJournal} />\r\n      <LatestNews onAddToJournal={handleAddToJournal} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewsFeed;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}