{"ast":null,"code":"import axios from 'axios';\nconst API = axios.create({\n  baseURL: 'http://localhost:5000/api'\n});\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Добавим интерцептор для ответов\nAPI.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Если получили 401, очищаем localStorage\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    // Можно добавить перенаправление, но лучше делать это в компонентах\n  }\n  return Promise.reject(error);\n});\nexport const fetchImage = async url => {\n  try {\n    const response = await axios.get(`/api/image-proxy?url=${encodeURIComponent(url)}`, {\n      responseType: 'blob'\n    });\n    return URL.createObjectURL(response.data);\n  } catch (error) {\n    console.error('Error fetching image:', error);\n    return null;\n  }\n};\nexport default API;","map":{"version":3,"names":["axios","API","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","status","removeItem","fetchImage","url","get","encodeURIComponent","responseType","URL","createObjectURL","data","console"],"sources":["C:/РКСП_курсач/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API = axios.create({\r\n  baseURL: 'http://localhost:5000/api',\r\n});\r\n\r\nAPI.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Добавим интерцептор для ответов\r\nAPI.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Если получили 401, очищаем localStorage\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      // Можно добавить перенаправление, но лучше делать это в компонентах\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const fetchImage = async (url) => {\r\n  try {\r\n    const response = await axios.get(`/api/image-proxy?url=${encodeURIComponent(url)}`, {\r\n      responseType: 'blob'\r\n    });\r\n    return URL.createObjectURL(response.data);\r\n  } catch (error) {\r\n    console.error('Error fetching image:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default API;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAM,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAZ,GAAG,CAACG,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAT,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;IAChCV,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;IAC/B;EACF;EACA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMO,UAAU,GAAG,MAAOC,GAAG,IAAK;EACvC,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMhB,KAAK,CAACsB,GAAG,CAAC,wBAAwBC,kBAAkB,CAACF,GAAG,CAAC,EAAE,EAAE;MAClFG,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAOC,GAAG,CAACC,eAAe,CAACV,QAAQ,CAACW,IAAI,CAAC;EAC3C,CAAC,CAAC,OAAOd,KAAK,EAAE;IACde,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,IAAI;EACb;AACF,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}