{"ast":null,"code":"// Фронтенд (SearchNews.jsx)\nconst handleInitialSearch = async searchQuery => {\n  if (!searchQuery.trim()) return;\n  setIsSearching(true);\n  try {\n    const response = await API.get('/api/news/search', {\n      params: {\n        q: searchQuery,\n        after: moment().toISOString() // Используем ISO формат\n      }\n    });\n    const newArticles = response.data.articles || [];\n    setResults(newArticles);\n    setLastPublishedAt(newArticles.length > 0 ? newArticles[newArticles.length - 1].publishedAt : null);\n  } catch (err) {\n    console.error('Ошибка поиска:', err);\n    setResults([]);\n    setLastPublishedAt(null);\n  } finally {\n    setIsSearching(false);\n  }\n};\nconst handleLoadMore = async () => {\n  if (!lastPublishedAt || isSearching) return;\n  setIsSearching(true);\n  try {\n    const response = await API.get('/api/news/search', {\n      params: {\n        q: query,\n        after: lastPublishedAt // Используем точную дату последней статьи\n      }\n    });\n    const newArticles = response.data.articles || [];\n    const uniqueNew = newArticles.filter(article => !results.some(a => a.url === article.url));\n    if (uniqueNew.length > 0) {\n      setResults(prev => [...prev, ...uniqueNew]);\n      setLastPublishedAt(uniqueNew[uniqueNew.length - 1].publishedAt);\n    } else {\n      // Если нет новых статей, отодвигаем дату на день назад\n      const previousDay = moment(lastPublishedAt).subtract(1, 'day').toISOString();\n      setLastPublishedAt(previousDay);\n    }\n  } catch (err) {\n    console.error('Ошибка при загрузке новых статей:', err);\n  } finally {\n    setIsSearching(false);\n  }\n};","map":{"version":3,"names":["handleInitialSearch","searchQuery","trim","setIsSearching","response","API","get","params","q","after","moment","toISOString","newArticles","data","articles","setResults","setLastPublishedAt","length","publishedAt","err","console","error","handleLoadMore","lastPublishedAt","isSearching","query","uniqueNew","filter","article","results","some","a","url","prev","previousDay","subtract"],"sources":["D:/Study/Course_rksp/frontend/src/components/SearchNews.jsx"],"sourcesContent":["// Фронтенд (SearchNews.jsx)\r\nconst handleInitialSearch = async (searchQuery) => {\r\n  if (!searchQuery.trim()) return;\r\n\r\n  setIsSearching(true);\r\n  try {\r\n    const response = await API.get('/api/news/search', {\r\n      params: {\r\n        q: searchQuery,\r\n        after: moment().toISOString(), // Используем ISO формат\r\n      }\r\n    });\r\n\r\n    const newArticles = response.data.articles || [];\r\n    setResults(newArticles);\r\n    setLastPublishedAt(newArticles.length > 0 \r\n      ? newArticles[newArticles.length - 1].publishedAt \r\n      : null);\r\n  } catch (err) {\r\n    console.error('Ошибка поиска:', err);\r\n    setResults([]);\r\n    setLastPublishedAt(null);\r\n  } finally {\r\n    setIsSearching(false);\r\n  }\r\n};\r\n\r\nconst handleLoadMore = async () => {\r\n  if (!lastPublishedAt || isSearching) return;\r\n\r\n  setIsSearching(true);\r\n  try {\r\n    const response = await API.get('/api/news/search', {\r\n      params: {\r\n        q: query,\r\n        after: lastPublishedAt, // Используем точную дату последней статьи\r\n      }\r\n    });\r\n\r\n    const newArticles = response.data.articles || [];\r\n    const uniqueNew = newArticles.filter(\r\n      article => !results.some(a => a.url === article.url)\r\n    );\r\n\r\n    if (uniqueNew.length > 0) {\r\n      setResults(prev => [...prev, ...uniqueNew]);\r\n      setLastPublishedAt(uniqueNew[uniqueNew.length - 1].publishedAt);\r\n    } else {\r\n      // Если нет новых статей, отодвигаем дату на день назад\r\n      const previousDay = moment(lastPublishedAt).subtract(1, 'day').toISOString();\r\n      setLastPublishedAt(previousDay);\r\n    }\r\n  } catch (err) {\r\n    console.error('Ошибка при загрузке новых статей:', err);\r\n  } finally {\r\n    setIsSearching(false);\r\n  }\r\n};"],"mappings":"AAAA;AACA,MAAMA,mBAAmB,GAAG,MAAOC,WAAW,IAAK;EACjD,IAAI,CAACA,WAAW,CAACC,IAAI,CAAC,CAAC,EAAE;EAEzBC,cAAc,CAAC,IAAI,CAAC;EACpB,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,GAAG,CAACC,GAAG,CAAC,kBAAkB,EAAE;MACjDC,MAAM,EAAE;QACNC,CAAC,EAAEP,WAAW;QACdQ,KAAK,EAAEC,MAAM,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAE;MACjC;IACF,CAAC,CAAC;IAEF,MAAMC,WAAW,GAAGR,QAAQ,CAACS,IAAI,CAACC,QAAQ,IAAI,EAAE;IAChDC,UAAU,CAACH,WAAW,CAAC;IACvBI,kBAAkB,CAACJ,WAAW,CAACK,MAAM,GAAG,CAAC,GACrCL,WAAW,CAACA,WAAW,CAACK,MAAM,GAAG,CAAC,CAAC,CAACC,WAAW,GAC/C,IAAI,CAAC;EACX,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEF,GAAG,CAAC;IACpCJ,UAAU,CAAC,EAAE,CAAC;IACdC,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC,SAAS;IACRb,cAAc,CAAC,KAAK,CAAC;EACvB;AACF,CAAC;AAED,MAAMmB,cAAc,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAI,CAACC,eAAe,IAAIC,WAAW,EAAE;EAErCrB,cAAc,CAAC,IAAI,CAAC;EACpB,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,GAAG,CAACC,GAAG,CAAC,kBAAkB,EAAE;MACjDC,MAAM,EAAE;QACNC,CAAC,EAAEiB,KAAK;QACRhB,KAAK,EAAEc,eAAe,CAAE;MAC1B;IACF,CAAC,CAAC;IAEF,MAAMX,WAAW,GAAGR,QAAQ,CAACS,IAAI,CAACC,QAAQ,IAAI,EAAE;IAChD,MAAMY,SAAS,GAAGd,WAAW,CAACe,MAAM,CAClCC,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKJ,OAAO,CAACI,GAAG,CACrD,CAAC;IAED,IAAIN,SAAS,CAACT,MAAM,GAAG,CAAC,EAAE;MACxBF,UAAU,CAACkB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE,GAAGP,SAAS,CAAC,CAAC;MAC3CV,kBAAkB,CAACU,SAAS,CAACA,SAAS,CAACT,MAAM,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC;IACjE,CAAC,MAAM;MACL;MACA,MAAMgB,WAAW,GAAGxB,MAAM,CAACa,eAAe,CAAC,CAACY,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAACxB,WAAW,CAAC,CAAC;MAC5EK,kBAAkB,CAACkB,WAAW,CAAC;IACjC;EACF,CAAC,CAAC,OAAOf,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEF,GAAG,CAAC;EACzD,CAAC,SAAS;IACRhB,cAAc,CAAC,KAAK,CAAC;EACvB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}